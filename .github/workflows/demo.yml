name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # value produced by hashFiles will change whenever passed value of file changes
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      # custom identifier for ouput
      script-file: ${{ steps.publish.outputs.something }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # value produced by hashFiles will change whenever passed value of file changes
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build website
        run: npm run build

      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'something={}' >> $GITHUB_OUTPUT ';'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: |
            dist
            package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files

      - name: Output contents
        run: ls

      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"

      - name: Deploy
        run: echo "Deploying..."
# Jobs can produce:
# -> artifacts (ex. folders and files)
# => outputs (ex. simple value like filename [numer, text])

# There is one central cache, so if we cached our dependencies in first job, it will be avaiable in the next job.
# npm ci look to ~/.npm folder
